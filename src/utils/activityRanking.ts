import { WeatherForecast, Activity, ActivityType } from '../schema/types'; // Generated by codegen
import { mean } from 'lodash';

interface ActivityScore {
  type: ActivityType;
  score: number;
}

export function rankActivities(forecasts: WeatherForecast[]): Activity[] {
  // Calculate averages over forecast days
  const avgTemp = mean(forecasts.map(f => (f.temperatureMax + f.temperatureMin) / 2));
  const avgPrecip = mean(forecasts.map(f => f.precipitationSum));
  const avgWind = mean(forecasts.map(f => f.windSpeedMax));

  // Define scoring rules
  const scores: ActivityScore[] = [
    {
      type: ActivityType.Skiing,
      score: avgTemp < 5 && avgPrecip > 0 ? 0.9 : 0.1,
    },
    {
      type: ActivityType.Surfing,
      score: avgTemp > 20 && avgPrecip < 1 && avgWind >= 10 && avgWind <= 30 ? 0.9 : 0.2,
    },
    {
      type: ActivityType.IndoorSightseeing,
      score: avgPrecip > 5 || avgTemp < 0 || avgTemp > 30 || avgWind > 40 ? 0.8 : 0.3,
    },
    {
      type: ActivityType.OutdoorSightseeing,
      score: avgTemp >= 10 && avgTemp <= 25 && avgPrecip < 1 && avgWind < 20 ? 0.9 : 0.2,
    },
  ];

  // Sort by score (descending) and assign ranks
  return scores
    .sort((a, b) => b.score - a.score)
    .map((score, index) => ({
      type: score.type,
      rank: index + 1,
      suitabilityScore: score.score,
    }));
}